"use client";

import { useState, useMemo } from "react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  Search,
  Filter,
  MoreHorizontal,
  Plus,
  Target,
  BarChart3,
  Users,
  Calendar,
  DollarSign,
  Play,
  Pause,
  Square,
  Edit,
  Trash2,
  Eye,
} from "lucide-react";
import { format } from "date-fns";
import type { Campaign } from "@/types/database";

interface CampaignListProps {
  campaigns: Campaign[];
  onEdit?: (campaign: Campaign) => void;
  onDelete?: (campaignId: string) => void;
  onView?: (campaign: Campaign) => void;
  onCreateNew?: () => void;
}

const statusColors = {
  draft: "bg-gray-100 text-gray-800",
  active: "bg-green-100 text-green-800",
  paused: "bg-yellow-100 text-yellow-800",
  completed: "bg-blue-100 text-blue-800",
};

const statusLabels = {
  draft: "Nh√°p",
  active: "ƒêang ch·∫°y",
  paused: "T·∫°m d·ª´ng",
  completed: "Ho√†n th√†nh",
};

const typeIcons = {
  email: "üìß",
  social: "üì±",
  content: "üìù",
  ads: "üí∞",
  other: "üéØ",
};

export function CampaignList({
  campaigns,
  onEdit,
  onDelete,
  onView,
  onCreateNew,
}: CampaignListProps) {
  const [searchTerm, setSearchTerm] = useState("");
  const [statusFilter, setStatusFilter] = useState<string>("all");
  const [typeFilter, setTypeFilter] = useState<string>("all");
  const [sortBy, setSortBy] = useState<string>("created_at");
  const [sortOrder, setSortOrder] = useState<"asc" | "desc">("desc");

  // Filter and sort campaigns
  const filteredAndSortedCampaigns = useMemo(() => {
    let filtered = campaigns.filter((campaign) => {
      const matchesSearch = campaign.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                           campaign.description?.toLowerCase().includes(searchTerm.toLowerCase());
      const matchesStatus = statusFilter === "all" || campaign.status === statusFilter;
      const matchesType = typeFilter === "all" || campaign.type === typeFilter;
      
      return matchesSearch && matchesStatus && matchesType;
    });

    // Sort campaigns
    filtered.sort((a, b) => {
      let aValue: any = a[sortBy as keyof Campaign];
      let bValue: any = b[sortBy as keyof Campaign];

      // Handle date sorting
      if (sortBy === "created_at" || sortBy === "start_date") {
        aValue = new Date(aValue || 0).getTime();
        bValue = new Date(bValue || 0).getTime();
      }

      // Handle number sorting
      if (sortBy === "budget") {
        aValue = Number(aValue) || 0;
        bValue = Number(bValue) || 0;
      }

      if (sortOrder === "asc") {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });

    return filtered;
  }, [campaigns, searchTerm, statusFilter, typeFilter, sortBy, sortOrder]);

  const handleStatusChange = (campaignId: string, newStatus: string) => {
    // This would typically call an API to update the campaign status
    console.log(`Updating campaign ${campaignId} status to ${newStatus}`);
  };

  const getStatusActions = (campaign: Campaign) => {
    switch (campaign.status) {
      case "draft":
        return (
          <DropdownMenuItem onClick={() => handleStatusChange(campaign.id, "active")}>
            <Play className="mr-2 h-4 w-4" />
            K√≠ch ho·∫°t
          </DropdownMenuItem>
        );
      case "active":
        return (
          <DropdownMenuItem onClick={() => handleStatusChange(campaign.id, "paused")}>
            <Pause className="mr-2 h-4 w-4" />
            T·∫°m d·ª´ng
          </DropdownMenuItem>
        );
      case "paused":
        return (
          <DropdownMenuItem onClick={() => handleStatusChange(campaign.id, "active")}>
            <Play className="mr-2 h-4 w-4" />
            Ti·∫øp t·ª•c
          </DropdownMenuItem>
        );
      default:
        return null;
    }
  };

  const formatBudget = (budget: number | null) => {
    if (!budget) return "Ch∆∞a thi·∫øt l·∫≠p";
    return new Intl.NumberFormat("vi-VN", {
      style: "currency",
      currency: "USD",
    }).format(budget);
  };

  const formatDate = (date: string | null) => {
    if (!date) return "Ch∆∞a thi·∫øt l·∫≠p";
    return format(new Date(date), "dd/MM/yyyy");
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">Chi·∫øn d·ªãch</h2>
          <p className="text-gray-600">
            Qu·∫£n l√Ω v√† theo d√µi c√°c chi·∫øn d·ªãch marketing c·ªßa b·∫°n
          </p>
        </div>
        <Button onClick={onCreateNew} className="flex items-center gap-2">
          <Plus className="w-4 h-4" />
          T·∫°o Chi·∫øn d·ªãch
        </Button>
      </div>

      {/* Filters and Search */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Filter className="w-5 h-5" />
            B·ªô l·ªçc & T√¨m ki·∫øm
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
              <Input
                placeholder="T√¨m ki·∫øm chi·∫øn d·ªãch..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10"
              />
            </div>

            <Select value={statusFilter} onValueChange={setStatusFilter}>
              <SelectTrigger className="w-full">
                <SelectValue placeholder="T·∫•t c·∫£ Tr·∫°ng th√°i" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">T·∫•t c·∫£ Tr·∫°ng th√°i</SelectItem>
                <SelectItem value="draft">Nh√°p</SelectItem>
                <SelectItem value="active">ƒêang ch·∫°y</SelectItem>
                <SelectItem value="paused">T·∫°m d·ª´ng</SelectItem>
                <SelectItem value="completed">Ho√†n th√†nh</SelectItem>
              </SelectContent>
            </Select>

            <Select value={typeFilter} onValueChange={setTypeFilter}>
              <SelectTrigger className="w-full">
                <SelectValue placeholder="T·∫•t c·∫£ Lo·∫°i" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">T·∫•t c·∫£ Lo·∫°i</SelectItem>
                <SelectItem value="email">Email Marketing</SelectItem>
                <SelectItem value="social">M·∫°ng x√£ h·ªôi</SelectItem>
                <SelectItem value="content">Marketing n·ªôi dung</SelectItem>
                <SelectItem value="ads">Qu·∫£ng c√°o k·ªπ thu·∫≠t s·ªë</SelectItem>
                <SelectItem value="other">Kh√°c</SelectItem>
              </SelectContent>
            </Select>

            <Select value={sortBy} onValueChange={setSortBy}>
              <SelectTrigger className="w-full">
                <SelectValue placeholder="S·∫Øp x·∫øp theo" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="created_at">Ng√†y t·∫°o</SelectItem>
                <SelectItem value="name">T√™n</SelectItem>
                <SelectItem value="budget">Ng√¢n s√°ch</SelectItem>
                <SelectItem value="start_date">Ng√†y b·∫Øt ƒë·∫ßu</SelectItem>
              </SelectContent>
            </Select>
          </div>

          {/* Sort Order Toggle */}
          <div className="mt-4 flex items-center gap-2">
            <span className="text-sm text-gray-600">Th·ª© t·ª± s·∫Øp x·∫øp:</span>
            <Button
              variant="outline"
              size="sm"
              onClick={() => setSortOrder(sortOrder === "asc" ? "desc" : "asc")}
            >
              {sortOrder === "asc" ? "‚Üë TƒÉng d·∫ßn" : "‚Üì Gi·∫£m d·∫ßn"}
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Campaigns Table */}
      <Card>
        <CardHeader>
          <CardTitle>Chi·∫øn d·ªãch ({filteredAndSortedCampaigns.length})</CardTitle>
          <CardDescription>
            Hi·ªÉn th·ªã {filteredAndSortedCampaigns.length} trong t·ªïng s·ªë {campaigns.length} chi·∫øn d·ªãch
          </CardDescription>
        </CardHeader>
        <CardContent>
          {filteredAndSortedCampaigns.length === 0 ? (
            <div className="text-center py-12">
              <Target className="w-12 h-12 mx-auto text-gray-400 mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">Kh√¥ng t√¨m th·∫•y chi·∫øn d·ªãch</h3>
              <p className="text-gray-600 mb-4">
                {searchTerm || statusFilter !== "all" || typeFilter !== "all"
                  ? "H√£y ƒëi·ªÅu ch·ªânh b·ªô l·ªçc ho·∫∑c t·ª´ kh√≥a t√¨m ki·∫øm"
                  : "B·∫Øt ƒë·∫ßu b·∫±ng c√°ch t·∫°o chi·∫øn d·ªãch ƒë·∫ßu ti√™n"}
              </p>
              {!searchTerm && statusFilter === "all" && typeFilter === "all" && (
                <Button onClick={onCreateNew}>
                  <Plus className="w-4 h-4 mr-2" />
                  T·∫°o Chi·∫øn d·ªãch
                </Button>
              )}
            </div>
          ) : (
            <div className="overflow-x-auto">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Chi·∫øn d·ªãch</TableHead>
                    <TableHead>Lo·∫°i</TableHead>
                    <TableHead>Tr·∫°ng th√°i</TableHead>
                    <TableHead>Ng√¢n s√°ch</TableHead>
                    <TableHead>Ng√†y b·∫Øt ƒë·∫ßu</TableHead>
                    <TableHead>Thao t√°c</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredAndSortedCampaigns.map((campaign) => (
                    <TableRow key={campaign.id}>
                      <TableCell>
                        <div className="flex items-center gap-3">
                          <div className="w-10 h-10 rounded-full bg-blue-100 flex items-center justify-center">
                            <Target className="w-5 h-5 text-blue-600" />
                          </div>
                          <div>
                            <div className="font-medium text-gray-900">{campaign.name}</div>
                            <div className="text-sm text-gray-500 line-clamp-2">
                              {campaign.description}
                            </div>
                          </div>
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center gap-2">
                          <span>{typeIcons[campaign.type as keyof typeof typeIcons]}</span>
                          <span className="capitalize">{campaign.type}</span>
                        </div>
                      </TableCell>
                      <TableCell>
                        <Badge className={statusColors[campaign.status as keyof typeof statusColors]}>
                          {statusLabels[campaign.status as keyof typeof statusLabels]}
                        </Badge>
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center gap-1">
                          <DollarSign className="w-4 h-4 text-gray-400" />
                          {formatBudget(campaign.budget)}
                        </div>
                      </TableCell>
                      <TableCell>
                        <div className="flex items-center gap-1">
                          <Calendar className="w-4 h-4 text-gray-400" />
                          {formatDate(campaign.start_date)}
                        </div>
                      </TableCell>
                      <TableCell>
                        <DropdownMenu>
                          <DropdownMenuTrigger asChild>
                            <Button variant="ghost" size="sm">
                              <MoreHorizontal className="w-4 h-4" />
                            </Button>
                          </DropdownMenuTrigger>
                          <DropdownMenuContent align="end">
                            <DropdownMenuLabel>Thao t√°c</DropdownMenuLabel>
                            {onView && (
                              <DropdownMenuItem onClick={() => onView(campaign)}>
                                <Eye className="mr-2 h-4 w-4" />
                                Xem chi ti·∫øt
                              </DropdownMenuItem>
                            )}
                            {onEdit && (
                              <DropdownMenuItem onClick={() => onEdit(campaign)}>
                                <Edit className="mr-2 h-4 w-4" />
                                Ch·ªânh s·ª≠a
                              </DropdownMenuItem>
                            )}
                            {getStatusActions(campaign)}
                            <DropdownMenuSeparator />
                            {onDelete && (
                              <DropdownMenuItem
                                onClick={() => onDelete(campaign.id)}
                                className="text-red-600"
                              >
                                <Trash2 className="mr-2 h-4 w-4" />
                                X√≥a
                              </DropdownMenuItem>
                            )}
                          </DropdownMenuContent>
                        </DropdownMenu>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}
